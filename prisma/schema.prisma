// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
  output     = "./../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Owner {
  id           Int         @id @default(autoincrement())
  fullName     String      @db.VarChar(255)
  email        String      @unique
  phone        String      @unique
  profile      String?
  refreshToken String?
  password     String
  state        String?
  city         String?
  Restaurant   Restaurant?
  signUpDate   DateTime    @default(now())
}

model User {
  id           Int      @id @default(autoincrement())
  fullName     String?  @db.VarChar(255)
  email        String   @unique
  phone        String?
  refreshToken String?
  Cart         Cart[]
  Order        Order[]
  signUpDate   DateTime @default(now())
}

model Restaurant {
  id          Int        @id @default(autoincrement())
  title       String     @db.VarChar(255)
  description String?
  score       Float[]    @default([5])
  body        String?
  banner      String?
  picture     String?
  logo        String?
  address     String?
  phone       String[]
  workTime    String?
  delivery    Int?       @default(0)
  owner       Owner      @relation(fields: [ownerId], references: [id])
  ownerId     Int        @unique
  href        String?    @unique
  watchCount  Int?       @default(0)
  Category    Category[]
  Product     Product[]
  Cart        Cart[]
  Order       Order[]
  createdAt   DateTime   @default(now())
}

model Category {
  id           Int        @id @default(autoincrement())
  title        String     @db.VarChar(255)
  href         String     @unique
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  Product      Product[]
  createdAt    DateTime   @default(now())
}

model Product {
  id          Int        @id @default(autoincrement())
  title       String
  picture     String?
  description String?
  price       Int
  isActive    Boolean    @default(true)
  discount    Int        @default(0)
  restaurant  Restaurant @relation(fields: [restId], references: [id])
  restId      Int
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  Int
  Cart        Cart[]
}

model Comment {
  id      Int      @id @default(autoincrement())
  title   String
  body    String
  date    DateTime @default(now())
  stats   Int      @default(0)
  order   Order    @relation(fields: [orderId], references: [id])
  orderId Int
}

model Cart {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  product      Product    @relation(fields: [products], references: [id])
  products     Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  count        Int        @default(1)
  price        Int        @default(0)
  discount     Int        @default(0)
}

model Order {
  uuid         String     @default(uuid())
  id           Int        @id @default(autoincrement())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  products     Json[]
  count        Int
  address      String     @default("Ask Him!")
  price        Int
  date         DateTime   @default(now())
  note         String?
  restaurantId Int
  userId       Int
  time         BigInt?
  createdAt    DateTime   @default(now())
  Comment      Comment[]
}
